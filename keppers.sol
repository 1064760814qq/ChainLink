// SPDX-License-Identifier: MIT
pragma solidity ^0.8.7;

// KeeperCompatible.sol imports the functions from both ./KeeperBase.sol and
// ./interfaces/KeeperCompatibleInterface.sol
import "@chainlink/contracts/src/v0.8/KeeperCompatible.sol";
import "@openzeppelin/contracts/access/Ownable.sol";

/**
 * THIS IS AN EXAMPLE CONTRACT THAT USES HARDCODED VALUES FOR CLARITY.
 * THIS IS AN EXAMPLE CONTRACT THAT USES UN-AUDITED CODE.
 * DO NOT USE THIS CODE IN PRODUCTION.
 */

contract Counter is KeeperCompatibleInterface,Ownable {
    /**
    * Public counter variable
    */
    uint public counter;
    bool public stateExec;
    bool public haveVRFData;
    bool public haveData;

    address public VRFORDES;
    bytes private execData;

    /**
    * Use an interval in seconds and a timestamp to slow execution of Upkeep
    */
    uint public  interval;
    uint public lastTimeStamp;

    constructor(uint updateInterval,address _VRFORDES) {
      interval = updateInterval;
      lastTimeStamp = block.timestamp;
      VRFORDES = _VRFORDES;
      counter = 0;
      stateExec = true;
    }

    function setInterval(uint updateInterval) public onlyOwner{
        interval = updateInterval;
    }

    function setDesAddress(address _VRFORDES) public onlyOwner {
        VRFORDES =  _VRFORDES;
    }

    function stateSwitch(bool _stateExec,bool _haveVRFData, bool _haveData) public onlyOwner{
        stateExec = _stateExec;
        haveVRFData = _haveVRFData;
        haveData = _haveData;
    }


    function setData(bytes memory data) public onlyOwner {
        execData = data;
    }


    function executeVRF()
    internal
    returns (bool result)
    {
        bytes memory tmp;
        (result, tmp) = VRFORDES.call(abi.encodeWithSignature("requestRandomWords()"));
        return result;
    }


    function checkUpkeep(bytes calldata /* checkData */) external view override returns (bool upkeepNeeded, bytes memory /* performData */) {
        upkeepNeeded = (( (block.timestamp - lastTimeStamp) > interval) && stateExec);
        // We don't use the checkData in this example. The checkData is defined when the Upkeep was registered.
    }

    function performUpkeep(bytes calldata /* performData */) external override {
        //We highly recommend revalidating the upkeep in the performUpkeep function
        if (( (block.timestamp - lastTimeStamp) > interval) && stateExec) {
            if(haveData){
                if(haveVRFData){
                    executeVRF();
                }
                else  {
                    bool result;
                   (result,) = VRFORDES.call(execData);
                    }
            }
            
            lastTimeStamp = block.timestamp;
            counter = counter + 1;
        }
        // We don't use the performData in this example. The performData is generated by the Keeper's call to your checkUpkeep function
    }
}